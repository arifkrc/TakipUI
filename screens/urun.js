import { showToast, showFormErrors, clearFormErrors } from '../ui/simple-table.js';
import { createProductsTable, getProductTypeFromCode, validateProductCodeAndType } from '../ui/tables/products-table.js';
let _cleanup = null;

export async function mount(container, { setHeader }) {
  setHeader('√úr√ºnler', '√úr√ºn tanƒ±mlarƒ±');

  container.innerHTML = `
    <div class="mt-2">
      <h3 class="text-xl font-semibold mb-2">√úr√ºn Ekle</h3>
      </br>
      <form id="urun-form" class="space-y-4">
        <div class="grid grid-cols-4 gap-4">
          <label class="flex flex-col text-sm">√úr√ºn Kodu<input name="productCode" type="text" class="mt-1 px-3 py-2 bg-neutral-800 rounded text-neutral-100" required /></label>
          <label class="flex flex-col text-sm">√úr√ºn Adƒ±<input name="name" type="text" class="mt-1 px-3 py-2 bg-neutral-800 rounded text-neutral-100" required /></label>
          <label class="flex flex-col text-sm">√úr√ºn Tipi
            <select name="type" class="mt-1 px-3 py-2 bg-neutral-800 rounded text-neutral-100" required>
              <option value="">Se√ßiniz...</option>
              <option value="Dƒ∞SK">Dƒ∞SK</option>
              <option value="KAMPANA">KAMPANA</option>
              <option value="POYRA">POYRA</option>
            </select>
          </label>
          <label class="flex flex-col text-sm">Son Operasyon
            <select name="lastOperationId" class="mt-1 px-3 py-2 bg-neutral-800 rounded text-neutral-100" required>
              <option value="">Y√ºkleniyor...</option>
            </select>
          </label>
        </div>

        <div class="grid grid-cols-1 gap-4">
          <label class="flex flex-col text-sm">A√ßƒ±klama<textarea name="description" rows="2" class="mt-1 px-3 py-2 bg-neutral-800 rounded text-neutral-100" placeholder="√úr√ºn a√ßƒ±klamasƒ± (opsiyonel)"></textarea></label>
        </div>

        <div class="flex items-center gap-3">
          <button type="submit" class="px-4 py-2 rounded bg-indigo-600 hover:bg-indigo-500">Kaydet</button>
          </br></br></br>
          <button type="button" id="urun-reset" class="px-4 py-2 rounded bg-neutral-700 hover:bg-neutral-600">Temizle</button>
        </div>
      </form>

      <div id="urun-list-placeholder"></div>
    </div>
  `;

  const form = container.querySelector('#urun-form');
  const placeholder = container.querySelector('#urun-list-placeholder');

  // API configuration
  const API_BASE_URL = 'https://localhost:7287/api';

  // Operasyonlarƒ± y√ºkle
  async function loadOperations() {
    const operationSelect = form.querySelector('[name="lastOperationId"]');
    
    try {
      const url = `${API_BASE_URL}/Operations?status=active`;
      const response = await fetch(url, {
        method: 'GET',
        headers: { 'Content-Type': 'application/json' }
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status} ${response.statusText}`);
      }

      const apiResponse = await response.json();
      const operations = apiResponse?.data || [];

      // Operasyon dropdown'ƒ±nƒ± doldur
      operationSelect.innerHTML = '<option value="">Operasyon se√ßiniz...</option>';
      operations.forEach(op => {
        const option = document.createElement('option');
        option.value = op.id;
        option.textContent = `${op.name} (${op.shortCode})`;
        operationSelect.appendChild(option);
      });

      console.log('‚úÖ Operations loaded:', operations.length);

    } catch (err) {
      console.error('‚ùå LOAD OPERATIONS ERROR:', err);
      operationSelect.innerHTML = '<option value="">Operasyon y√ºklenemedi</option>';
      showToast('Operasyonlar y√ºklenirken hata olu≈ütu', 'error');
    }
  }

  async function submitHandler(e) {
    e.preventDefault();
    console.log('üöÄ Form submit ba≈üladƒ±');
    clearFormErrors(form);
    
    const fd = new FormData(form);
    const data = Object.fromEntries(fd.entries());
    console.log('üìã Form data:', data);

    const errors = [];
    if (!data.productCode) errors.push({ field: 'productCode', msg: '√úr√ºn kodu gerekli' });
    if (!data.name) errors.push({ field: 'name', msg: '√úr√ºn adƒ± gerekli' });
    if (!data.type) errors.push({ field: 'type', msg: '√úr√ºn tipi se√ßimi gerekli' });
    if (!data.lastOperationId) errors.push({ field: 'lastOperationId', msg: 'Son operasyon se√ßimi gerekli' });
    
    if (errors.length) { 
      console.log('‚ùå Validation errors:', errors);
      showFormErrors(form, errors); 
      return;
    }

    console.log('‚úÖ Validation passed, proceeding...');

    // √úr√ºn kodu ve tip uyumluluƒüunu kontrol et
    const validation = validateProductCodeAndType(data.productCode, data.type);
    
    if (!validation.isValid || validation.warning) {
      const message = validation.warning || `Kod-tip uyumsuzluƒüu: Beklenen "${validation.expectedType}", Se√ßilen "${data.type}"`;
      showToast(`‚ö†Ô∏è UYARI: ${message} - Kayƒ±t devam ediyor...`, 'warning');
    }

    const submitBtn = form.querySelector('button[type="submit"]');
    submitBtn.disabled = true; 
    submitBtn.textContent = 'Kaydediliyor...';
    
    try {
      const payload = {
        productCode: data.productCode,
        name: data.name,
        type: data.type,
        description: data.description || '',
        lastOperationId: data.lastOperationId ? parseInt(data.lastOperationId) : null // Convert to integer
      };

      const url = `${API_BASE_URL}/Products`;
      console.log('üîó API REQUEST URL:', url);
      console.log('üì§ PAYLOAD:', JSON.stringify(payload, null, 2));
      
      const response = await fetch(url, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      });

      console.log('üì• RESPONSE STATUS:', response.status, response.statusText);
      
      if (!response.ok) {
        const responseText = await response.text();
        console.log('‚ùå RESPONSE ERROR BODY:', responseText);
        
        let errorMessage = 'Kaydetme hatasƒ± olu≈ütu';
        
        // HTTP 409 (Conflict) durumunda √∂zel mesaj
        if (response.status === 409) {
          errorMessage = `√úr√ºn kodu "${data.productCode}" zaten mevcut. L√ºtfen farklƒ± bir kod girin.`;
        } else {
          // Diƒüer hatalar i√ßin genel mesaj
          errorMessage = `HTTP ${response.status}: Kaydetme hatasƒ± - ${responseText}`;
        }
        
        throw new Error(errorMessage);
      }
      
      const responseData = await response.json();
      console.log('‚úÖ SUCCESS RESPONSE:', responseData);
      
      showToast('√úr√ºn ba≈üarƒ±yla kaydedildi', 'success');
      form.reset();
      await dataTable.reload();
      
    } catch (err) {
      console.error('‚ùå CREATE PRODUCT ERROR:', err);
      showToast('Kaydetme hatasƒ±: ' + err.message, 'error');
    } finally { 
      submitBtn.disabled = false; 
      submitBtn.textContent = 'Kaydet'; 
    }
  }

  function resetHandler() { 
    form.reset(); 
    // Operasyonlarƒ± yeniden y√ºkle
    loadOperations();
  }

  form.addEventListener('submit', submitHandler);
  container.querySelector('#urun-reset').addEventListener('click', resetHandler);
  
  console.log('üìã Form event listeners attached');
  console.log('üîç Form element:', form);
  console.log('üîç Submit button:', form.querySelector('button[type="submit"]'));

  // √úr√ºn kodu deƒüi≈ütiƒüinde otomatik tip √∂nerisi
  const productCodeInput = form.querySelector('[name="productCode"]');
  const typeSelect = form.querySelector('[name="type"]');
  
  productCodeInput.addEventListener('input', (e) => {
    const productCode = e.target.value;
    const suggestedType = getProductTypeFromCode(productCode);
    
    if (suggestedType && typeSelect.value === '') {
      // Sadece tip se√ßilmemi≈üse otomatik √∂neri yap
      typeSelect.value = suggestedType;
      showToast(`√úr√ºn tipi otomatik "${suggestedType}" olarak ayarlandƒ±`, 'info');
    }
  });

  // Form reset butonunu g√ºncelleyelim ki operasyon se√ßimi de temizlensin
  function resetHandler() { 
    form.reset(); 
    // Operasyonlarƒ± yeniden y√ºkle
    loadOperations();
  }

  // Create data table with configuration
  const dataTable = createProductsTable(API_BASE_URL);

  placeholder.appendChild(dataTable);
  await dataTable.init();

  // Operasyonlarƒ± y√ºkle
  await loadOperations();

  _cleanup = () => {
    try { form.removeEventListener('submit', submitHandler); } catch(e){}
    try { const resetBtn = container.querySelector('#urun-reset'); if (resetBtn) resetBtn.removeEventListener('click', resetHandler); } catch(e){}
    try { container.innerHTML = ''; } catch(e){}
    _cleanup = null;
  };
}

export async function unmount(container) { 
  if (_cleanup) _cleanup(); 
}